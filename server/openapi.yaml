openapi: 3.0.3
info:
  title: Digital Signature Server (DSS) API
  version: "1.0.0"
  description: |
    REST API for a Digital Signature Server (DSS). The DSS generates and stores
    RSA key pairs per user, signs documents on behalf of authenticated users,
    and lets clients retrieve public keys, CSRs and stored certificates.

    **Security model**: This demo API transmits credentials (username, password)
    inside request bodies or query parameters over HTTPS. There is no session
    or token. Ensure all traffic is over TLS in production.
  contact:
    name: DSS Project
servers:
  - url: https://127.0.0.1:5000
    description: Local development over HTTPS

tags:
  - name: Info
    description: Basic info & spec hosting
  - name: Auth & Users
    description: User registration, login, and deletion of stored keys
  - name: Keys & Certificates
    description: Public key lookup, CSR generation, and certificate storage
  - name: Signing
    description: Document signing

paths:
  /:
    get:
      tags: [Info]
      summary: Health check
      description: Returns a simple greeting to confirm the server is running.
      responses:
        '200':
          description: Server is running
          content:
            text/plain:
              schema:
                type: string
              example: "Hello, this is the Digital Signature Server!"

  /openapi.yaml:
    get:
      tags: [Info]
      summary: Serve this OpenAPI spec
      description: Returns the YAML OpenAPI document used by Swagger UI.
      responses:
        '200':
          description: OpenAPI YAML
          content:
            application/yaml:
              schema:
                type: string

  /register:
    post:
      tags: [Auth & Users]
      summary: Batch register employees and generate key pairs
      description: |
        Accepts a list of employees (first + last names). For each valid entry,
        the server:
          - creates a unique username (e.g., jdoe),
          - generates a strong temporary password (returned only once),
          - hashes the password with bcrypt,
          - generates an RSA-2048 key pair,
          - encrypts the private key with the temporary password (PKCS#8 + BestAvailableEncryption),
          - stores pw_hash, keys, and password_changed=false in the internal DB.

        Input can be either a raw array or wrapped in { "employees": [...] }.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BatchRegisterRequest'
                - type: array
                  items:
                    $ref: '#/components/schemas/EmployeeInput'
            examples:
              wrapped:
                summary: Wrapped list of employees
                value:
                  employees:
                    - first_name: Alice
                      last_name: Doe
                    - name: Bob
                      surname: Rossi
              raw_list:
                summary: Raw list of employees
                value:
                  - firstname: Zoë
                    lastname: Łukasz
                  - name: Maria
                    family_name: García
      responses:
        '201':
          description: Accounts created; temporary passwords are returned only once in this response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchRegisterResponse'
              example:
                created_count: 3
                skipped_count: 1
                created:
                  - username: adoe
                    temp_password: q9V1P2k3m4Xz
                  - username: brossi
                    temp_password: K7t2J8r1E0hQ
                  - username: zlukasz
                    temp_password: A3m6n1Q9w2Zx
                skipped:
                  - index: 4
                    reason: Missing first/last name
                    entry: { nickname: "N/A" }
        '400':
          description: Invalid payload or no valid employees provided.

  /login:
    post:
      tags: [Auth & Users]
      summary: Login (password check only)
      description: Verifies a username/password against the stored bcrypt hash.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              ok:
                value: { "username": "alice", "password": "S3cret!" }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              example: { "message": "Login successful." }
        '400': { description: Missing username or password }
        '401': { description: Invalid password }
        '404': { description: User not found }

  /delete_keys:
    post:
      tags: [Auth & Users]
      summary: Delete a user's keys and data
      description: Deletes the user's entry from the DB after verifying password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteKeysRequest'
            examples:
              ok:
                value: { "username": "alice", "password": "S3cret!" }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              example: { "message": "Key pair and user data deleted." }
        '400': { description: Missing username or password }
        '401': { description: Invalid password }
        '404': { description: User not found }

  /get_public_key:
    get:
      tags: [Keys & Certificates]
      summary: Get a user's public key (PEM)
      description: Returns the PEM-encoded public key for the specified username.
      parameters:
        - $ref: '#/components/parameters/UsernameQuery'
      responses:
        '200':
          description: Public key returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKeyResponse'
              example:
                username: alice
                public_key: |
                  -----BEGIN PUBLIC KEY-----
                  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A...
                  -----END PUBLIC KEY-----
        '400': { description: Username query parameter is required }
        '404': { description: User not found }

  /get_csr:
    get:
      tags: [Keys & Certificates]
      summary: Generate and return a CSR (PEM)
      description: |
        Decrypts the user's private key with the provided password and returns
        a freshly generated Certificate Signing Request (CSR) using the username
        as the subject CN and a default email attribute.
      parameters:
        - $ref: '#/components/parameters/UsernameQuery'
        - $ref: '#/components/parameters/PasswordQuery'
      responses:
        '200':
          description: CSR returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRResponse'
              example:
                csr: |
                  -----BEGIN CERTIFICATE REQUEST-----
                  MIICWjCCAUECAQAwETEPMA0GA1UEAwwGYWxpY2Uw...
                  -----END CERTIFICATE REQUEST-----
        '400': { description: Missing username or password }
        '401': { description: Invalid password }
        '404': { description: User not found }

  /upload_certificate:
    post:
      tags: [Keys & Certificates]
      summary: Upload and store a user certificate (PEM)
      description: Stores a PEM-encoded certificate associated to the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCertificateRequest'
            examples:
              ok:
                value:
                  username: alice
                  certificate: |
                    -----BEGIN CERTIFICATE-----
                    MIID...AB
                    -----END CERTIFICATE-----
      responses:
        '200':
          description: Stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              example: { "message": "Certificate uploaded and stored." }
        '400': { description: Missing username or certificate }
        '404': { description: User not found }

  /get_certificate:
    get:
      tags: [Keys & Certificates]
      summary: Retrieve stored certificate (PEM)
      description: Returns the PEM-encoded certificate previously uploaded for the user.
      parameters:
        - $ref: '#/components/parameters/UsernameQuery'
      responses:
        '200':
          description: Certificate returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponse'
              example:
                certificate: |
                  -----BEGIN CERTIFICATE-----
                  MIID...AB
                  -----END CERTIFICATE-----
        '400': { description: Username query parameter is required }
        '404': { description: Certificate not found for user }

  /sign_doc:
    post:
      tags: [Signing]
      summary: Sign a document with the user's private key
      description: |
        Decrypts the user's private key using the provided password and signs
        the input document bytes with RSA-PSS (SHA-256). Returns the Base64
        signature string.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignDocRequest'
            examples:
              ok:
                value:
                  username: alice
                  password: "S3cret!"
                  document: "Hello DSS"
      responses:
        '200':
          description: Signature returned (Base64)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
              example:
                signature: "b64=="
        '400': { description: Missing username, password, or document }
        '401': { description: Invalid password }
        '404': { description: User not found }
        '500': { description: Private key decryption/signing error }

components:
  parameters:
    UsernameQuery:
      name: username
      in: query
      description: Username
      required: true
      schema: { type: string }
    PasswordQuery:
      name: password
      in: query
      description: User's password (used to decrypt the private key)
      required: true
      schema:
        type: string
        format: password

  schemas:
    EmployeeInput:
      type: object
      description: One employee record. Any one of the first/last name key variants is accepted.
      properties:
        first_name:
          type: string
          description: Given name
        firstname:
          type: string
          description: Given name (alias)
        name:
          type: string
          description: Given name (alias)
        last_name:
          type: string
          description: Family name
        lastname:
          type: string
          description: Family name (alias)
        surname:
          type: string
          description: Family name (alias)
        family_name:
          type: string
          description: Family name (alias)
      additionalProperties: true

    BatchRegisterRequest:
      type: object
      required: [employees]
      properties:
        employees:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeInput'

    CreatedAccount:
      type: object
      properties:
        username:
          type: string
          example: adoe
        temp_password:
          type: string
          description: Returned only once; not stored in plaintext.
          example: q9V1P2k3m4Xz

    SkippedEntry:
      type: object
      properties:
        index:
          type: integer
          description: 1-based position of the entry in the input list.
        reason:
          type: string
          example: Missing first/last name
        entry:
          type: object
          description: Original input that was skipped.
      additionalProperties: true

    BatchRegisterResponse:
      type: object
      properties:
        created_count:
          type: integer
          example: 3
        skipped_count:
          type: integer
          example: 1
        created:
          type: array
          items:
            $ref: '#/components/schemas/CreatedAccount'
        skipped:
          type: array
          items:
            $ref: '#/components/schemas/SkippedEntry'

    RegisterRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: alice }
        password: { type: string, format: password, example: "S3cret!" }

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: alice }
        password: { type: string, format: password, example: "S3cret!" }

    DeleteKeysRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: alice }
        password: { type: string, format: password, example: "S3cret!" }

    SignDocRequest:
      type: object
      required: [username, password, document]
      properties:
        username: { type: string, example: alice }
        password: { type: string, format: password, example: "S3cret!" }
        document: { type: string, example: "Hello DSS" }

    UploadCertificateRequest:
      type: object
      required: [username, certificate]
      properties:
        username: { type: string, example: alice }
        certificate:
          type: string
          description: PEM-encoded certificate text
          example: |
            -----BEGIN CERTIFICATE-----
            MIID...AB
            -----END CERTIFICATE-----

    PublicKeyResponse:
      type: object
      properties:
        username: { type: string }
        public_key:
          type: string
          description: PEM-encoded public key

    CSRResponse:
      type: object
      properties:
        csr:
          type: string
          description: PEM-encoded Certificate Signing Request

    CertificateResponse:
      type: object
      properties:
        certificate:
          type: string
          description: PEM-encoded X.509 certificate

    SignatureResponse:
      type: object
      properties:
        signature:
          type: string
          description: Base64-encoded RSA-PSS signature (SHA-256)

    MessageResponse:
      type: object
      properties:
        message: { type: string }

    ErrorResponse:
      type: object
      properties:
        error: { type: string }
